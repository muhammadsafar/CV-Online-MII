create table Role
(
id number(10) PRIMARY KEY NOT NULL,
role varchar2 (20) NOT NULL
);

create table site
(
id varchar2(10) PRIMARY KEY NOT NULL,
site varchar2(50) NOT NULL,
status number(2) NOT NULL
);

create table hr
(
nik varchar2(20) PRIMARY KEY NOT NULL,
nama varchar2(50) NOT NULL,
username varchar2(10) NOT NULL,
password varchar2(10) NOT NULL,
role_id number(10) NOT NULL,
constraint role_hr FOREIGN KEY(role_id) references Role(id)
);

create table customer
(
id varchar2(20) PRIMARY KEY NOT NULL,
nama varchar2(50) NOT NULL,
username varchar2(10) NOT NULL,
password varchar2(10) NOT NULL,
role_id number(10) NOT NULL,
constraint role_customer FOREIGN KEY(role_id) references Role(id),
site_id varchar2(10) NOT NULL,
constraint customer_site FOREIGN KEY(site_id) references Site(id)
);

create table app_dev
(
nik varchar2(20) PRIMARY KEY NOT NULL,
username varchar2(10) NOT NULL,
password varchar2(10) NOT NULL,
nama varchar2(50) NOT NULL,
alamat varchar2(100),
birthday date,
nationality varchar2(5),
marital_status varchar2(10),
gender varchar2(10),
status varchar2(10),
role_id number(10) NOT NULL,
constraint ad_role FOREIGN KEY(role_id) references Role(id),
religion_id number(2) NOT NULL,
constraint ad_religion FOREIGN KEY(religion_id) references religion(id)
);

create table ad_site
(
site_id varchar2(10) NOT NULL,
constraint rel_site FOREIGN KEY(site_id) references site(id),
ad_id varchar2(20) NOT NULL,
constraint rel_ad FOREIGN KEY(ad_id) references app_dev(nik),
review varchar2(200),
status number(2)
);

create table religion
(
id number(2) PRIMARY KEY NOT NULL,
religion varchar2(10)
);

create table foreign_language
(
id number(5) PRIMARY KEY NOT NULL,
language varchar2(20)
);

create table language_ad
(
language_id number(5),
constraint language_rel1 FOREIGN KEY(language_id) references foreign_language(id),
ad_id varchar2(20),
constraint language_rel2 FOREIGN KEY(ad_id) references app_dev(nik)
);

create table education(
id number(10) PRIMARY KEY NOT NULL,
education VARCHAR2(255)
);

create table education_ad
(
education_id number(10),
constraint ed_rel1 FOREIGN KEY(education_id) references education(id),
ad_id varchar(20),
constraint ed_rel2 FOREIGN KEY(ad_id) references app_dev(nik)
);

create table technical_qualification(
id number(10) PRIMARY KEY NOT NULL,
tec_qualification VARCHAR2(255)
);

create table technical_ad(
tec_id number(10),
constraint tec_rel1 FOREIGN KEY(tec_id) references technical_qualification(id),
ad_id varchar(20),
constraint tec_rel2 FOREIGN KEY(ad_id) references app_dev(nik)
);

create table experience(
id number(10) PRIMARY KEY NOT NULL,
experience VARCHAR2(255)
);

create table experience_ad(
ex_id number(10),
constraint ex_rel1 FOREIGN KEY(ex_id) references experience(id),
ad_id varchar(20),
constraint ex_rel2 FOREIGN KEY(ad_id) references app_dev(nik),
start_year date,
end_year date
);

create table award(
id number(10) PRIMARY KEY NOT NULL,
award_name VARCHAR2(255)
);

create table award_id(
award_id number(10),
constraint award_rel1 FOREIGN KEY(award_id) references award(id),
ad_id varchar(20),
constraint award_rel2 FOREIGN KEY(ad_id) references app_dev(nik),
year date
);

create table training(
id number(10) PRIMARY KEY NOT NULL,
training_name VARCHAR2(255)
);

create table training_ad(
training_id number(10),
constraint training_rel1 FOREIGN KEY(training_id) references training(id),
ad_id varchar(20),
constraint training_rel2 FOREIGN KEY(ad_id) references app_dev(nik),
year date
);

create table organization(
id number(10) PRIMARY KEY NOT NULL,
organization_name VARCHAR2(255)
);

create table organization_ad(
organization_id number(10),
constraint org_rel1 FOREIGN KEY(organization_id) references organization(id),
ad_id varchar(20),
constraint org_rel2 FOREIGN KEY(ad_id) references app_dev(nik)
);


----------------------------------------------------------------P R O C E D U R E----------------------------------------------------------------------
---TAMBAH PENULIS
create or replace procedure tambahCustomer(nm in Customer.nama%type, user in Customer.username%type, pass in Customer.password%type, siteid in Customer.site_id%type)
IS
cursor c_customer is select id, nama, username, password, role_id, site_id from Customer order by id;
 temp number(10) := 1;
 tmp varchar2(5);
 idfix varchar2(5);
 kode varchar2(5) := 'C';
 a c_customer%rowtype;
begin
  for a in c_customer loop
  tmp := substr(a.id, 2, 5);
  if (temp > to_number(tmp))
   then
   temp := temp;
  else
   temp := temp +1;
  end if;
 end loop;
idfix := concat(kode, LPAD(temp, 4, 0));
insert into Customer values (idfix, nm, user, pass, 3, siteid);
END;

begin
 tambahCustomer('Ayin', 'ayin', 'ayin', 'S0003');
end;

--TAMBAH SITE
create or replace procedure tambahSite(nm in Site.site%type)
IS
cursor s_site is select id, site from Site order by id;
 temp number(10) := 1;
 tmp varchar2(5);
 idfix varchar2(5);
 kode varchar2(5) := 'S';
 a s_site%rowtype;
begin
  for a in s_site loop
  tmp := substr(a.id, 2, 5);
  if (temp > to_number(tmp))
   then
   temp := temp;
  else
   temp := temp +1;
  end if;
 end loop;
idfix := concat(kode, LPAD(temp, 4, 0));
insert into Site values (idfix, nm, 1);
END;

begin
 tambahSite('Bank Rakyat Indonesia');
end;

--TAMBAH RELIGION
create or replace procedure tambahReligion(rel in Religion.religion%type)
IS
cursor r_rel is select id, religion from Religion order by id;
 temp number(10) := 1;
 a r_rel%rowtype;
begin
  for a in r_rel loop
  if (temp > a.id)
   then
   temp := temp;
  else
   temp := temp +1;
  end if;
 end loop;
insert into Religion values (temp, rel);
END;

--TAMBAH EXPERIENCE
create or replace procedure tambahExp(ex in Experience.experience%type)
IS
cursor e_ex is select id, experience from Experience order by id;
 temp number(10) := 1;
 a e_ex%rowtype;
begin
  for a in e_ex loop
  if (temp > a.id)
   then
   temp := temp;
  else
   temp := temp +1;
  end if;
 end loop;
insert into Experience values (temp, ex);
END;

--TAMBAH TRAINING
create or replace procedure tambahTraining(train in Training.training_name%type)
IS
cursor t_train is select id, training_name from Training order by id;
 temp number(10) := 1;
 a t_train%rowtype;
begin
  for a in t_train loop
  if (temp > a.id)
   then
   temp := temp;
  else
   temp := temp +1;
  end if;
 end loop;
insert into Training values (temp, train);
END;

--TAMBAH EDUCATION
create or replace procedure tambahEdu(edu in Education.education%type)
IS
cursor e_edu is select id, education from Education order by id;
 temp number(10) := 1;
 a e_edu%rowtype;
begin
  for a in e_edu loop
  if (temp > a.id)
   then
   temp := temp;
  else
   temp := temp +1;
  end if;
 end loop;
insert into Education values (temp, edu);
END;

begin
 tambahEdu('S1 Teknik Infromatika Universitas Indonesia');
end;

--TAMBAH FOREIGN LANGUAGE
create or replace procedure tambahLang(lang in Foreign_language.language%type)
IS
cursor l_lang is select id, language from Foreign_language order by id;
 temp number(10) := 1;
 a l_lang%rowtype;
begin
  for a in l_lang loop
  if (temp > a.id)
   then
   temp := temp;
  else
   temp := temp +1;
  end if;
 end loop;
insert into Foreign_language values (temp, lang);
END;

begin
 tambahLang('Korea');
end;

--TAMBAH AWARD
create or replace procedure tambahAward(award in Award.award_name%type)
IS
cursor a_award is select id, award_name from Award order by id;
 temp number(10) := 1;
 a a_award%rowtype;
begin
  for a in a_award loop
  if (temp > a.id)
   then
   temp := temp;
  else
   temp := temp +1;
  end if;
 end loop;
insert into Award values (temp, award);
END;

--TAMBAH TECHNICAL QUALIFICATION
create or replace procedure tambahTech(tech in technical_qualification.tec_qualification%type)
IS
cursor t_tec is select id, tec_qualification from technical_qualification order by id;
 temp number(10) := 1;
 a t_tec%rowtype;
begin
  for a in t_tec loop
  if (temp > a.id)
   then
   temp := temp;
  else
   temp := temp +1;
  end if;
 end loop;
insert into technical_qualification values (temp, tech);
END;
